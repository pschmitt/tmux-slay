#!/usr/bin/env bash

usage() {
  echo "Usage: $(basename "$0") run|kill|check|list [CMD]"
}

check_session() {
  tmux list-sessions -F '#{session_name}' 2>/dev/null | \
    grep -qE -- "^${TMUX_SLAY_SESSION}\$"
}

tmux_set_option() {
  local -a extra_args
  local tmux_config=${XDG_CONFIG_HOME:-${HOME}/.config}/tmux/tmux.conf

  # Apply XDG_CONFIG_HOME hack
  if [[ -r "$tmux_config" ]]
  then
    extra_args=(-f "$tmux_config")
  fi

  extra_args+=(-t "$TMUX_SLAY_SESSION")

  tmux "${extra_args[@]}" set-option "$@"
}

create_session() {
  local extra_args=(
    new-session -d
    -s "$TMUX_SLAY_SESSION"
    -n "$TMUX_SLAY_INIT_WINDOW_TITLE"
  )
  export XDG_CONFIG_HOME="${XDG_CONFIG_HOME:-${HOME}/.config}"
  export XDG_DATA_HOME="${XDG_DATA_HOME:-${HOME}/.local/share}"
  local tmux_config=${XDG_CONFIG_HOME}/tmux/tmux.conf

  # Apply XDG_CONFIG_HOME hack
  if [[ -r "$tmux_config" ]]
  then
    extra_args=(-f "$tmux_config" "${extra_args[@]}")
  fi

  # Create session
  tmux "${extra_args[@]}"

  # Disable destroy-unattached for this session
  tmux_set_option destroy-unattached off
}

list_commands() {
  local cmd
  local colorize
  local output
  local raw
  local simple
  local window_id
  local window_name
  local -A color=(
    [cmd]='\e[34m'
    [ogcmd]='\e[36m'
    [window_id]='\e[32m'
    [window_name]='\e[35m'
    [reset]='\e[0m'
  )

  while [[ -n "$*" ]]
  do
    case "$1" in
      -r|--raw)
        raw=1
        shift
        ;;
      -s|--simple)
        simple=1
        shift
        ;;
      -n|--names-only)
        names_only=1
        shift
        ;;
      -c|--color)
        colorize=1
        shift
        ;;
      *)
        break
        ;;
    esac
  done

  tmux list-panes -s -t "$TMUX_SLAY_SESSION" \
      -F '#{window_id} #{pane_start_command}' \
      2>/dev/null | \
    while read -r output
  do
    # Check if a command filter has been provided
    if [[ -n "$*" ]] && ! grep -q -- "$*" <<< "$output"
    then
      continue
    fi

    # Only display panes with a non-empty start command
    if [[ "$(wc -w <<< "$output")" -lt 2 ]]
    then
      continue
    fi

    read -r window_id cmd <<< "$output"
    window_name="$(tmux_get_window_name_from_window_id "$window_id")"

    if [[ -n "$raw" ]]
    then
      echo "$window_id $window_name $cmd"
    else
      local ogcmd

      cmd="$(get_window_cmd "$window_id")"
      ogcmd="$(get_window_og_cmd "$window_id")"

      if [[ -n "$colorize" ]]
      then
        cmd="${color[cmd]}${cmd}${color[reset]}"
        ogcmd="${color[ogcmd]}${ogcmd}${color[reset]}"
        window_id="${color[window_id]}${window_id}${color[reset]}"
        window_name="${color[window_name]}${window_name}${color[reset]}"
      fi

      if [[ -n "$names_only" ]]
      then
        echo "${window_name}"
      elif [[ -n "$simple" ]]
      then
        echo -e "$window_id [${window_name}] $ogcmd"
      else
        echo -e "$window_id [${window_name}] $ogcmd [$cmd]"
      fi
    fi
  done
}

tmux_show_log() {
  local follow
  local logtail
  local win_id

  while [[ -n "$*" ]]
  do
    case "$1" in
      -f|--follow)
        follow=1
        shift
        ;;
      -t|--tail)
        logtail="$2"
        # Substract one cause tmux shows 2 lines if called with "-E -1"
        logtail="$(( logtail - 1 ))"
        shift 2
        ;;
      --)
        shift
        break
        ;;
      *)
        break
        ;;
    esac
  done

  win_id="$1"

  if [[ -n "$win_id" ]]
  then
    local target="${TMUX_SLAY_SESSION}:${win_id}"
    local hist_size
    hist_size="$(tmux show-options -t "$TMUX_SLAY_SESSION" -gqv history-limit)"
    if [[ -z "$hist_size" ]]
    then
      # FIXME What's tmux's default?
      hist_size=2000
    fi

    # Show logs
    if [[ -z "$follow" ]]
    then
      if [[ -n "$logtail" ]]
      then
        tmux capture-pane -p -t "$target" -E "-${logtail}"
      else
        tmux capture-pane -p -S "-${hist_size}" -t "$target"
      fi
    else
      local tmpfile
      tmpfile="$(mktemp --tmpdir --suffix=.log 'tmux-slay.XXXXXX')"

      if [[ -n "$TMUX_SLAY_DEBUG" ]]
      then
        echo "Logging pane contents to $tmpfile" >&2
      fi

      # shellcheck disable=2064
      trap "rm -f \"${tmpfile}\"; tmux pipe-pane -t \"${target}\"" \
        SIGINT SIGTERM EXIT

      # Run once without any command to clear previous pipes
      tmux pipe-pane -t "$target"
      tmux pipe-pane -t "$target" -O "cat >> \"$tmpfile\""

      if [[ -n "$logtail" ]]
      then
        # Show last X lines of the log
        tmux capture-pane -p -t "$target" -E "-${logtail}"
      fi

      tail -f "$tmpfile"
    fi
  else
    return 1
  fi
}

get_logs() {
  # FIXME DRY (see tmux_kill_window)
  local -a extra_args
  local input_type=guess

  while [[ -n "$*" ]]
  do
    case "$1" in
      -f|--follow)
        extra_args+=(-f)
        shift
        ;;
      -t|--tail)
        extra_args+=(-t "$2")
        shift 2
        ;;
      --)
        shift
        break
        ;;
      *)
        break
        ;;
    esac
  done

  case "$1" in
    --latest|-l)
      input_type=latest
      shift
      ;;
    --cmd|-c)
      input_type=cmd
      shift
      ;;
    --guess|-g)
      input_type=guess
      shift
      ;;
    --pane-id|--pane|-p)
      input_type=pane_id
      shift
      ;;
    --window-id|--wid|--id)
      input_type=window_id
      shift
      ;;
    --window-name|--name|-n)
      input_type=window_name
      shift
      ;;
    *)
      input_type=guess
      ;;
  esac

  case "$input_type" in
    latest)
      mapfile -t win_ids < <(get_latest_window)
      ;;
    cmd)
      mapfile -t win_ids < <(get_cmd_window_id "$@")
      ;;
    pane_id)
      mapfile -t win_ids < <(tmux_get_window_id_from_pane_id "$@")
      ;;
    window_id)
      win_ids=("$@")
      ;;
    window_name)
      # Window name provided
      mapfile -t win_ids < <(tmux_get_window_id_from_window_name "$@")
      ;;
    guess)
      mapfile -t win_ids < <(guess_window_id_from_input -n "$@")
      ;;
  esac

  # We don't allow multiple selections
  local win_id="${win_ids[0]}"

  tmux_show_log "${extra_args[@]}" "$win_id"
}

guess_window_id_from_input() {
  local nofallback

  case "$1" in
    -n|--no-guess|--no-last|--no-fallback)
      nofallback=1
      shift
      ;;
  esac

  if [[ -z "$1" ]] && [[ -z "$nofallback" ]]
  then
    # No param. Get the last pane (previous command)
    get_latest_window
    # Alternative that will select the last window (by window index):
    # tmux_get_last_window_id
  elif [[ "$1" =~ ^[+-]?[0-9]+([.][0-9]+)?$ ]]
  then
    mapfile -t win_ids < <(tmux_get_all_window_ids | sort)
    echo "${win_ids[$1]}" 2>/dev/null
  elif [[ "$1" =~ %.+ ]]
  then
    # Pane ID provided
    tmux_get_window_id_from_pane_id "$1"
  elif [[ "$1" =~ @.+ ]]
  then
    # Window ID provided
    echo -- "$@"
  else
    # Command provided
    get_cmd_window_id "$@"
  fi
}

select_window() {
  local id

  id="$(guess_window_id_from_input "$@")"

  if [[ -n "$id" ]]
  then
    # Focus session
    tmux switch-client -t "${TMUX_SLAY_SESSION}"
    # Focus window
    tmux select-window -t "${TMUX_SLAY_SESSION}:${id}"
  else
    return 1
  fi
}

check_on_command() {
  [[ -n "$(get_cmd_window_id "$@")" ]]
}

slugify_cmd_human() {
  sed -r 's/[^a-zA-Z0-9]+/-/g' <<< "$*" | \
    sed -r 's/^-+\|-+$//g' | \
    tr '[:upper:]' '[:lower:]' | \
    cut -c 1-20
}

slugify_cmd_machine() {
  md5sum <<< "$*" | awk '{ print $1 }'
}

wrap_command() {
  local wcmd="$*"
  local wait_period="${WAIT_PERIOD:-1}"
  local tshell="${SLAY_SHELL:-zsh -ic}"
  local sudocmd="${SLAY_SUDO:-sudo --}"

  if [[ -n "$TIMEOUT" ]]
  then
    wcmd="timeout -k ${TIMEOUT}s -s 9 ${TIMEOUT}s $tshell '${wcmd}'"
  fi

  if [[ -n "$LOOP" ]]
  then
    wcmd="while true; do ${wcmd}; sleep ${wait_period}; done"
  fi

  if [[ -z "$NOWRAP" ]]
  then
    wcmd="$tshell "\"${wcmd}\"""
  fi

  if [[ -n "$SUDO" ]]
  then
    # FIXME The "\\" leads to the command in list containing \ chars
    # Example: %204 sudo -- \while true; do whoami; sleep 1; done\
    # wcmd="sudo -- \\"${wcmd}\\""
    wcmd="$sudocmd \\"${wcmd}\\""
  fi

  if [[ -n "$TMUX_SLAY_DEBUG" ]]
  then
    echo "Wrapped command: $wcmd" >&2
  fi

  echo "$wcmd"
}

setup_window_metadata() {
  local win_id="$1"
  local name="$2"
  local og_cmd="$3"
  local cmd="$4"
  local cmd_prefix="$cmd_prefix"
  local cmd_suffix="$cmd_suffix"
  local exit_cmd="${EXIT_CMD}"
  local sudo="${SUDO}"
  local sudo_cmd="${SUDO_CMD}"
  local sudocmd="${SLAY_SUDO:-sudo --}"
  local timeout="${TIMEOUT}"
  local tshell="${SLAY_SHELL:-zsh -ic}"
  local wait_period="${WAIT_PERIOD:-1}"

  set_window_metadata "$win_id" cmd "$cmd"
  set_window_metadata "$win_id" cmd_id "$(slugify_cmd_machine "$cmd")"
  set_window_metadata "$win_id" cmd_prefix "$cmd_prefix"
  set_window_metadata "$win_id" cmd_slug "$(slugify_cmd_human "$cmd")"
  set_window_metadata "$win_id" cmd_suffix "$cmd_suffix"
  set_window_metadata "$win_id" date "$(date -Iseconds)"
  set_window_metadata "$win_id" exit_cmd "$exit_cmd"
  set_window_metadata "$win_id" og_cmd "$og_cmd"
  set_window_metadata "$win_id" shell "$tshell"
  set_window_metadata "$win_id" sudo "$sudo"
  set_window_metadata "$win_id" sudo_cmd "$sudo_cmd"
  set_window_metadata "$win_id" timeout "$timeout"
  set_window_metadata "$win_id" wait_period "$wait_period"
}

set_window_metadata() {
  local win_id="$1"
  local key="$2"
  local val="$3"

  tmux set -w -t "${win_id}" \
    "@${key}" "$val"
}

get_window_metadata() {
  local win_id="$1"
  local key="$2"

  tmux show -wv -t "$win_id" "@${key}"
}

get_window_start_date() {
  get_window_metadata "$1" date
}

get_window_cmd() {
  get_window_metadata "$1" cmd
}

get_window_cmd_id() {
  get_window_metadata "$1" cmd_id
}

get_window_cmd_slug() {
  get_window_metadata "$1" cmd_slug
}

get_window_og_cmd() {
  get_window_metadata "$1" og_cmd
}

get_window_exit_cmd() {
  get_window_metadata "$1" exit_cmd
}

list_slay_cmd_ids() {
  local win_id
  list_commands -r | while read -r win_id _
  do
    get_window_cmd_id "$win_id"
  done
}

tmux_exec() {
  local name="$1"
  shift
  local target_window="$TMUX_SLAY_SESSION"

  local extra_args=()

  if [[ -n "$BACKGROUND" ]]
  then
    extra_args+=(-d)
  fi

  if [[ -n "$TMUX_SLAY_CWD" ]]
  then
    extra_args+=(-c "$TMUX_SLAY_CWD")
  fi

  if [[ -n "$APPEND" ]]
  then
    extra_args+=(-a)
  else
    target_window+=":$(tmux_get_next_available_window_index)"
  fi

  if [[ -n "${SLAY_ENV[*]}" ]]
  then
    local e
    for e in "${SLAY_ENV[@]}"
    do
      extra_args+=(-e "$e")
    done
  fi

  tmux new-window -P -F '#{window_id}' \
    -t "$target_window" \
    -n "$name" \
    "${extra_args[@]}" \
    -- "$@"
}

format_cmd() {
  local name="$1"
  shift
  sed -r "s/%win_cmd/${name}/" <<< "$*"
}

tmux_exec_wrap() {
  local cmd
  local cmd_prefix
  local cmd_suffix
  local name

  while [[ -n "$*" ]]
  do
    case "$1" in
      -n|--name)
        name="$2"
        shift 2
        ;;
      -p|--prefix|--before)
        cmd_prefix="trap '$2' SIGEXIT SIGINT SIGTERM; "
        shift 2
        ;;
      -s|--suffix|--after)
        cmd_suffix="; $2;"
        shift 2
        ;;
      *)
        break
        ;;
    esac
  done

  if [[ -z "$name" ]]
  then
    name="$(slugify_cmd_human "$@")"
  fi

  # Replace %win_cmd with $name in prefix/suffix commands
  cmd_prefix="$(format_cmd "$name" "$cmd_prefix")"
  cmd_suffix="$(format_cmd "$name" "$cmd_suffix")"

  local og_cmd="${*}"
  cmd="${cmd_prefix}$(wrap_command "${og_cmd}")${cmd_suffix}"

  local win_id
  win_id="$(tmux_exec "$name" "$cmd")"
  local rc="$?"

  setup_window_metadata "$win_id" "$name" "$og_cmd" "$cmd"
  return "$rc"
}

tmux_window_exists() {
  tmux list-windows -t "$TMUX_SLAY_SESSION" -F '#{window_name}' | \
    grep -qE -- "^${1}\$"
}

tmux_get_all_windows() {
  # Filter out TMUX_SLAY_INIT_WINDOW_TITLE so that we do not kill the session
  tmux list-windows -t "$TMUX_SLAY_SESSION" \
    -F '#{window_id} #{window_name}' 2>/dev/null | \
      grep -v -- "$TMUX_SLAY_INIT_WINDOW_TITLE"
}

tmux_get_all_window_ids() {
  tmux_get_all_windows | awk '{ print $1 }'
}

tmux_get_last_window_id() {
  tmux_get_all_windows | head -1 | awk '{ print $1 }'
}

get_latest_window() {
  local cmd
  local latest_win_id
  local output
  local win_id
  local start_date
  local tmp
  local ts=-1

  while read -r win_id _ cmd
  do
    start_date="$(get_window_start_date "$win_id")"
    tmp="$(date -d "$start_date" +'%s')"

    if [[ "$tmp" -gt "$ts" ]]
    then
      ts="$tmp"
      latest_win_id="$win_id"
    fi
  done < <(list_commands -r)

  if [[ -z "$latest_win_id" ]]
  then
    return 1
  fi

  echo "$latest_win_id"
}

tmux_get_window_info() {
  tmux list-windows -t "$TMUX_SLAY_SESSION" \
    -F '#{window_id} #{window_name}' | \
    grep -- "$1"
}

tmux_get_last_window_index() {
  tmux list-windows -t "$TMUX_SLAY_SESSION" -F '#{window_index}' | \
    sort -u | tail -1
}

tmux_get_next_available_window_index() {
  local last_win_index
  last_win_index="$(tmux_get_last_window_index)"
  echo $(( last_win_index + 1 ))
}

tmux_get_window_id_from_window_name() {
  tmux_get_window_info "$1"| awk '{ print $1 }'
}

tmux_get_window_name_from_window_id() {
  tmux_get_window_info "$1" | awk '{ print $2 }'
}

tmux_get_window_info_from_pane_id() {
  tmux list-panes -s -t "$TMUX_SLAY_SESSION" \
    -F '#{pane_id} #{window_id} #{window_name}' | \
    grep -- "$1"
}

tmux_get_window_id_from_pane_id() {
  tmux_get_window_info_from_pane_id "$1" | awk '{ print $2 }'
}

tmux_get_window_name_from_pane_id() {
  tmux_get_window_info_from_pane_id "$1" | awk '{ print $3 }'
}

get_cmd_window_id() {
  local og_cmd
  local win_id

  list_commands -r | while read -r win_id _
  do
    og_cmd="$(get_window_og_cmd "$win_id")"

    if [[ -n "$TMUX_SLAY_DEBUG" ]]
    then
      echo "CMD=$* vs. OG_CMD=$og_cmd" >&2
    fi

    if [[ "$og_cmd" == "$*" ]]
    then
      echo "$win_id"
    fi
  done
}

_tmux_kill_windows() {
  local -a win_ids=("$@")
  local win_id
  local win_name

  if [[ -z "${win_ids[*]}" ]]
  then
    return 1
  fi

  for win_id in "${win_ids[@]}"
  do
    # _tmux_kill_window "$win_id"
    win_name="$(tmux_get_window_name_from_window_id "$win_id")"
    exit_cmd="$(get_window_exit_cmd "$win_id")"

    echo "Killing window $win_name"
    tmux kill-window -t "${TMUX_SLAY_SESSION}:${win_id}"

    if [[ -n "$exit_cmd" ]]
    then
      echo "Running exit command for window $win_id: '$exit_cmd'"
      eval "$exit_cmd; true"
    fi
  done
}

tmux_kill_window() {
  local -a win_ids
  local exit_cmd
  local input_type
  local win_id
  local win_name

  case "$1" in
    --all|-a)
      input_type=all
      shift
      ;;
    --latest|-l)
      input_type=latest
      shift
      ;;
    --cmd|-c)
      input_type=cmd
      shift
      ;;
    --guess|-g)
      input_type=guess
      shift
      ;;
    --pane-id|--pane|-p)
      input_type=pane_id
      shift
      ;;
    --window-id|--wid|--id)
      input_type=window_id
      shift
      ;;
    --window-name|--name|-n)
      input_type=window_name
      shift
      ;;
    *)
      input_type=guess
      ;;
  esac

  case "$input_type" in
    all)
      mapfile -t win_ids < <(tmux_get_all_window_ids)
      ;;
    latest)
      mapfile -t win_ids < <(get_latest_window)
      ;;
    cmd)
      mapfile -t win_ids < <(get_cmd_window_id "$@")
      ;;
    pane_id)
      mapfile -t win_ids < <(tmux_get_window_id_from_pane_id "$@")
      ;;
    window_id)
      win_ids=("$@")
      ;;
    window_name)
      # Window name provided
      mapfile -t win_ids < <(tmux_get_window_id_from_window_name "$@")
      ;;
    guess)
      mapfile -t win_ids < <(guess_window_id_from_input -n "$@")
      ;;
  esac

  if [[ -z "${win_ids[*]}" ]]
  then
    return 1
  fi

  _tmux_kill_windows "${win_ids[@]}"
}

# Parameters (global env vars)
TMUX_SLAY_DEBUG=${TMUX_SLAY_DEBUG} # Set to any var to enable debug mode
TMUX_SLAY_SESSION="${TMUX_SLAY_SESSION:-bg}"
TMUX_SLAY_INIT_WINDOW_TITLE="${TMUX_SLAY_INIT_WINDOW_TITLE:-bg-init}"


if [[ "${BASH_SOURCE[0]}" == "${0}" ]]
then
  set -e

  SLAY_ENV=()

  case "$1" in
    help|h|--help|-h)
      usage
      exit 0
      ;;
    run|start|r|s|up)
      ACTION=run
      NOTIFY_TIMEOUT=5
      shift
      while [[ -n "$*" ]]
      do
        case "$1" in
          -a|--append)
            APPEND=1
            shift
            ;;
          -u|--unique)
            UNIQUE=1
            shift
            ;;
          -c|--check)
            CHECK=1
            shift
            ;;
          -k|--kill)
            # shellcheck disable=2209
            ACTION=kill
            shift
            ;;
          -N|-W|--nowrap|--no-wrap)
            NOWRAP=1
            shift
            ;;
          --cd|--cwd)
            TMUX_SLAY_CWD="$2"
            shift 2
            ;;
          --notify)
            CMD_PREFIX='notify-send -a "tmux-slay" -t "%timeout" "%win_cmd exited [RC=$?]"'
            shift
            ;;
          --notify-timeout)
            NOTIFY_TIMEOUT="$2"
            shift 2
            ;;
          --exit|--exit-command|--ex)
            EXIT_CMD="$2"
            shift 2
            ;;
          -n|--name)
            NAME="$2"
            shift 2
            ;;
          -l|--loop)
            LOOP=1
            # Check if $2 is a positive integer
            # https://stackoverflow.com/a/808740/1872036
            if [[ -n "$2" ]] && [[ "$2" -eq "$2" ]] 2>/dev/null && \
               [[ "$2" -gt 0 ]]
            then
              WAIT_PERIOD="$2"
              shift
            fi
            shift
            ;;
          -w|--wait)
            WAIT_PERIOD="$2"
            shift 2
            ;;
          -s|--sudo)
            SUDO=1
            shift
            ;;
          -t|--timeout)
            TIMEOUT="$2"
            shift 2
            ;;
          -f|--foreground|-S|--select)
            SELECT=1
            shift
            ;;
          -b|--background)
            BACKGROUND=1
            shift
            ;;
          -e|--env)
            SLAY_ENV+=("$2")
            shift 2
            ;;
          -q|--quiet)
            QUIET=1
            shift
            ;;
          --)
            shift
            break
            ;;
          *)
            break
            ;;
        esac
      done
      if [[ -n "$TMUX_SLAY_DEBUG" ]]
      then
        {
          echo -n "LOOP=$LOOP UNIQUE=$UNIQUE CHECK=$CHECK KILL=$KILL "
          echo "ACTION=$ACTION WAIT_PERIOD=$WAIT_PERIOD"
          echo "SLAY_ENV=${SLAY_ENV[*]}"
          echo "EXIT_CMD=$EXIT_CMD"
          echo "CMD=$*"
        } >&2
      fi
      ;;
    kill|stop|k|down)
      # shellcheck disable=2209
      ACTION=kill
      shift
      while [[ -n "$*" ]]
      do
        case "$1" in
          -n|--name)
            NAME="$2"
            shift 2
            ;;
          --)
            shift
            break
            ;;
          *)
            break
            ;;
        esac
      done
      ;;
    clean|killall)
      ACTION=killall
      shift
      while [[ -n "$*" ]]
      do
        case "$1" in
          -n|--name)
            NAME="$2"
            shift 2
            ;;
          --)
            shift
            break
            ;;
          *)
            break
            ;;
        esac
      done
      ;;
    check)
      ACTION=check
      shift
      while [[ -n "$*" ]]
      do
        case "$1" in
          -q|--quiet)
            QUIET=1
            shift
            ;;
          --)
            shift
            break
            ;;
          *)
            break
            ;;
        esac
      done
      ;;
    list|ls)
      ACTION=list
      shift
      while [[ -n "$*" ]]
      do
        case "$1" in
          -C|--no-color)
            NO_COLOR=1
            shift
            ;;
          *)
            break
            ;;
        esac
      done
      ;;
    logs|lg)
      ACTION=logs
      shift
      while [[ -n "$*" ]]
      do
        case "$1" in
          -f|--follow)
            LOG_FOLLOW=1
            shift
            ;;
          -t|--tail)
            LOG_TAIL="$2"
            shift 2
            ;;
          -n|--name)
            NAME="$2"
            shift 2
            ;;
          --)
            shift
            break
            ;;
          *)
            break
            ;;
        esac
      done
      ;;
    select|show)
      ACTION=select
      shift
      ;;
    *)
      usage
      exit 2
      ;;
  esac

  case "$ACTION" in
    list)
      extra_args=()

      if [[ -z "$NO_COLOR" ]] && [[ -t 1 ]]
      then
        extra_args+=(--color)
      fi

      list_commands "${extra_args[@]}" "$@" | sort
      ;;
    select)
      select_window "$@"
      ;;
    check)
      if [[ -z "$*" ]]
      then
        echo "Missing command." >&2
        exit 2
      fi
      if check_on_command "$@"
      then
        if [[ -z "$QUIET" ]]
        then
          list_commands -s "$@"
        fi
        exit 0
      else
        if [[ -z "$QUIET" ]]
        then
          echo "Command $* is NOT running." >&2
        fi
        exit 1
      fi
      ;;
    logs)
      extra_args=()

      if [[ -n "$LOG_FOLLOW" ]]
      then
        extra_args+=(-f)
      fi

      if [[ -n "$LOG_TAIL" ]]
      then
        extra_args+=(-t "$LOG_TAIL")
      fi

      if [[ -n "$NAME" ]]
      then
        get_logs "${extra_args[@]}" --name "$NAME"
      else
        if [[ -n "$*" ]]
        then
          get_logs "${extra_args[@]}" "$@"
        else
          get_logs "${extra_args[@]}" --latest
        fi
      fi
      ;;
    run)
      if [[ -z "$*" ]]
      then
        echo "Missing command." >&2
        exit 2
      fi

      if ! check_session
      then
        create_session
      fi

      # If CHECK is set then don't re-execute the command if it is already running
      if [[ "$CHECK" == "1" ]] && check_on_command "$@"
      then
        if [[ -z "$QUIET" ]]
        then
          list_commands -s "$@"
        fi
        if [[ -n "$SELECT" ]]
        then
          select_window "$@"
        fi
        exit 0
      fi

      # Kill previous commands if UNIQUE
      if [[ "$UNIQUE" == "1" ]]
      then
        # TODO Kill all except latest
        tmux_kill_window --cmd "$@" || true
      fi

      # Update notify-send settings and convert seconds to ms
      CMD_PREFIX="$(awk "
        {
          gsub(\"%timeout\", \"$NOTIFY_TIMEOUT\" * 1000, \$0);
          print \$0;
        }" <<< "$CMD_PREFIX")"
      tmux_exec_wrap -n "$NAME" --prefix "$CMD_PREFIX" "$@"
      list_commands -s --color "$@"

      if [[ -n "$SELECT" ]]
      then
        select_window "$@"
      fi
      ;;
    kill)
      extra_args=()

      if [[ -n "$NAME" ]]
      then
        extra_args+=(--name "$NAME")
      elif [[ -n "$*" ]]
      then
        extra_args+=("$@")
      else
        extra_args+=(--latest)
      fi

      tmux_kill_window "${extra_args[@]}"
      ;;
    killall)
      extra_args=()

      if [[ -n "$NAME" ]]
      then
        extra_args+=(--name "$NAME")
      elif [[ -n "$*" ]]
      then
        extra_args+=("$@")
      else
        extra_args+=(--all)
      fi

      tmux_kill_window "${extra_args[@]}"
      ;;
  esac
fi

# vim: set ft=bash et ts=2 sw=2 :
